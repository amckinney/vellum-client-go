// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/vellum-ai/vellum-client-go/core"
)

type SandboxMetricInputParamsRequest struct {
	Params *EvaluationParamsRequest `json:"params,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SandboxMetricInputParamsRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxMetricInputParamsRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxMetricInputParamsRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxMetricInputParamsRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SandboxScenario struct {
	Label *string `json:"label,omitempty"`
	// The inputs for the scenario
	Inputs []*ScenarioInput `json:"inputs,omitempty"`
	// The id of the scenario
	Id                string                    `json:"id"`
	MetricInputParams *SandboxMetricInputParams `json:"metric_input_params,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SandboxScenario) UnmarshalJSON(data []byte) error {
	type unmarshaler SandboxScenario
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SandboxScenario(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SandboxScenario) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ScenarioInputRequest struct {
	Key         string                 `json:"key"`
	Type        *ScenarioInputTypeEnum `json:"type,omitempty"`
	Value       *string                `json:"value,omitempty"`
	ChatHistory []*ChatMessageRequest  `json:"chat_history,omitempty"`

	_rawJSON json.RawMessage
}

func (s *ScenarioInputRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ScenarioInputRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ScenarioInputRequest(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ScenarioInputRequest) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpsertSandboxScenarioRequestRequest struct {
	Label *string `json:"label,omitempty"`
	// The inputs for the scenario
	Inputs []*ScenarioInputRequest `json:"inputs,omitempty"`
	// The id of the scenario to update. If none is provided, an id will be generated and a new scenario will be appended.
	ScenarioId        *string                          `json:"scenario_id,omitempty"`
	MetricInputParams *SandboxMetricInputParamsRequest `json:"metric_input_params,omitempty"`
}
